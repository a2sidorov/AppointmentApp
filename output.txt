

listening on port 3000
  Testing routes
    injection attack
Query {
  _mongooseOptions: {},
  mongooseCollection: 
   NativeCollection {
     collection: Collection { s: [Object] },
     opts: 
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'users',
     collectionName: 'users',
     conn: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        name: 'mydb',
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        client: [MongoClient],
        '$initialConnection': [Promise],
        db: [Db] },
     queue: [],
     buffer: false,
     emitter: EventEmitter { _events: {}, _eventsCount: 0, _maxListeners: undefined } },
  model: 
   { [Function: model]
     hooks: Kareem { _pres: [Map], _posts: [Map] },
     base: 
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        plugins: [Array] },
     modelName: 'User',
     model: [Function: model],
     db: 
      NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: [Object],
        name: 'mydb',
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        client: [MongoClient],
        '$initialConnection': [Promise],
        db: [Db] },
     discriminators: { Business: [Function] },
     '$appliedMethods': true,
     '$appliedHooks': true,
     schema: 
      Schema {
        obj: [Object],
        paths: [Object],
        aliases: {},
        subpaths: {},
        virtuals: [Object],
        singleNestedPaths: {},
        nested: [Object],
        inherits: {},
        callQueue: [],
        _indexes: [],
        methods: [Object],
        methodOptions: {},
        statics: {},
        tree: [Object],
        query: {},
        childSchemas: [],
        plugins: [Array],
        s: [Object],
        _userProvidedOptions: [Object],
        options: [Object],
        '$globalPluginsApplied': true,
        discriminatorMapping: [Object],
        discriminators: [Object],
        _requiredpaths: [Array],
        _indexedpaths: [Array] },
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'users',
        collectionName: 'users',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     Query: { [Function] base: [Query] },
     '$__insertMany': [Function],
     '$init': Promise { null },
     '$caught': true,
     typeKey: 'type',
     id: true,
     noVirtualId: false,
     _id: true,
     noId: false,
     validateBeforeSave: true,
     read: null,
     shardKey: null,
     autoIndex: null,
     minimize: true,
     discriminatorKey: '__t',
     versionKey: '__v',
     capped: false,
     bufferCommands: true,
     strict: true },
  schema: 
   Schema {
     obj: 
      { local: [Object],
        firstname: [Object],
        lastname: [Object],
        contacts: [Array],
        appointments: [Array] },
     paths: 
      { 'local.email': [SchemaString],
        'local.password': [SchemaString],
        'local.resetPasswordToken': [SchemaString],
        'local.resetPasswordExpires': [SchemaDate],
        firstname: [SchemaString],
        lastname: [SchemaString],
        contacts: [SchemaArray],
        appointments: [SchemaArray],
        _id: [ObjectId],
        __v: [SchemaNumber],
        kind: [SchemaString] },
     aliases: {},
     subpaths: {},
     virtuals: { id: [VirtualType] },
     singleNestedPaths: {},
     nested: { local: true },
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: { generateHash: [Function], validPassword: [Function] },
     methodOptions: {},
     statics: {},
     tree: 
      { local: [Object],
        firstname: [Object],
        lastname: [Object],
        contacts: [Array],
        appointments: [Array],
        _id: [Object],
        __v: [Function: Number],
        id: [VirtualType],
        kind: [Object] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     s: { hooks: [Kareem] },
     _userProvidedOptions: { discriminatorKey: 'kind' },
     options: 
      { discriminatorKey: 'kind',
        typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     discriminatorMapping: { key: 'kind', value: null, isRoot: true },
     discriminators: { Business: [Schema] },
     _requiredpaths: [ 'local.password', 'local.email' ],
     _indexedpaths: [ [Array] ] },
  op: 'findOne',
  options: {},
  _conditions: { 'local.email': { '$ne': null } },
  _fields: undefined,
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection: 
   NodeCollection {
     collection: 
      NativeCollection {
        collection: [Collection],
        opts: [Object],
        name: 'users',
        collectionName: 'users',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter] },
     collectionName: 'users' },
  _traceFunction: undefined }
      âœ“ first


  1 passing (169ms)

